13.8 - OVERLAPPING AND DELEGATING CONSTRUCTORS

DELEGATING CONSTRUCTORS

Constructors are allowed to call other constructors from the same class. This process is called delegating constructors (or constructor chaining).

To have one constructor call another, simply call the constructor in the member initializer list. This is one case where calling another constructor directly is acceptable.

13.11 - CLASS CODE AND HEADER FILES

DEFINING MEMBER FUNCTIONS OUTSIDE THE CLASS DEFINITION

PUTTING CLASS DEFINITIONS IN A HEADER FILE

DOESN’T DEFINING A CLASS IN A HEADER FILE VIOLATE THE ONE-DEFINITION RULE?

It shouldn’t with your header guards.
Types (which include classes), are exempt from the part of the one-definition rule that says you can only have one definition per program. Therefore, there isn’t an issue #including class definitions into multiple code files (if there was, classes wouldn’t be of much use).

DOESN’T DEFINING MEMBER FUNCTIONS IN THE HEADER VIOLATE THE ONE-DEFINITION RULE?

It depends. Member functions defined inside the class definition are considered implicitly inline. Inline functions are exempt from the one definition per program part of the one-definition rule. This means there is no problem defining trivial member functions (such as access functions) inside the class definition itself.

Member functions defined outside the class definition are treated like normal functions, and are subject to the one definition per program part of the one-definition rule. Therefore, those functions should be defined in a code file, not inside the header. One exception is for template functions, which are also implicitly inline.

13.12 - CONST CLASS OBJECTS AND MEMBER FUNCTIONS

BEST PRACTIVE
Make any member function that does not modify the state of the class object const, so that it can be called by const objects.

13.13 - STATIC MEMBER VARIABLE AND MEMBER FUNCTIONS

Access static members by class name (using the scope resolution operator) rather than through an object of the class (using the member selection operator).

When we declare a static member variable inside a class, we’re telling the compiler about the existence of a static member variable, but not actually defining it (much like a forward declaration). Because static member variables are not part of the individual class objects (they are treated similarly to global variables, and get initialized when the program starts), you must explicitly define the static member outside of the class, in the global scope.


